%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import cv2 as cv
import imageio
import os

def imageShow(image):
    plt.figure(figsize=(10,20))
    plt.imshow(image)
    plt.show()
#Показ файлу

def kernel(n):
    kernel=np.ones((n),np.uint8)
    return kernel

def get_positive_integer(prompt):
    while True:
        value = input(prompt)
        if not value.isdigit():
            print("Введення таких символів неможливо, дозволено введення цілими додатніми числами.")
        else:
            return int(value)

def transformMain(filepath):
    imageOrigin = cv.cvtColor(cv.imread(filepath), cv.COLOR_BGR2RGB)
    flagCoreLoop=True
    while(flagCoreLoop):
        imageProcessed = np.copy(imageOrigin)
        print("- - - - -")
        while(flagCoreLoop):
  #          contour=int(input("Введіть розмір ядра: "))
            contour=get_positive_integer("Введіть розмір ядра: ")
            contourKernel=kernel(contour)
            
            quetion = input("Ви впевнені що хочете обрати цей розмір ядра? Так/Ні ")
  
            if(quetion=='Так'):
                imgStep1=cv.erode(imageProcessed,contourKernel, 1) #Розмиття
                imgStep2=cv.cvtColor(imgStep1, cv.COLOR_BGR2GRAY) #Монохромне
                break

        while(flagCoreLoop):
        
            thresh=get_positive_integer("Оберіть поріг для перетворення: ")
           
            quetion = input("Ви впевнені що хочете обрати цей поріг перетворення? Так/Ні ")
            if(quetion=='Так'):
                thresh, imgStep3=cv.threshold(imgStep2, thresh, 255, cv.THRESH_BINARY) #Бінарне
                imgStep4=cv.erode(cv.dilate(imgStep3,contourKernel, 1),contourKernel, 1) #Закриття
                imgStep5=cv.subtract(cv.dilate(imgStep4,contourKernel, 1), cv.erode(imgStep4,contourKernel, 1)) #Градієнт
                imgStep6=cv.dilate(imgStep5,contourKernel, 1) #Розширення
                break
            
        #Пошук контурів, і макс. контуру
        foundContours,hierarchy=cv.findContours(imgStep5, cv.RETR_TREE, cv.CHAIN_APPROX_NONE)
        contourLengthIndex=[]
        for i in range(len(foundContours)):
            contourLength=len(foundContours[i])
            contourLengthIndex.append([i,contourLength])
        index=np.where(contourLengthIndex==np.max(contourLengthIndex))[0][0]

        #Пошук вершин(згідно з практичною)
        perimeter = cv.arcLength(foundContours[index],True)
        points = cv.approxPolyDP(foundContours[index],0.02*perimeter,True)

        contourImage=imageOrigin.copy()
        #Нанесення точок
        colorIndexing=0
        for i in points:
            cv.circle(contourImage,(int(i[0][0]),int(i[0][1])),8,(0,0,(50+colorIndexing*50)),-1)
            colorIndexing+=1
        imageShow(contourImage)

        print("Точки пофарбовані відповідно до їх індексу. Введіть індекс кожної точки до відповідного кута.")
        index1=get_positive_integer("Вкажіть індекс верхнього лівого кута: ")
        index2=get_positive_integer("Вкажіть індекс верхнього правого кута: ")
        index3=get_positive_integer("Вкажіть індекс нижнього лівого кута: ")
        index4=get_positive_integer("Вкажіть індекс нижнього правого кута: ")
       
        
        y,x,c = imageOrigin.shape
        imageCoords1 = np.float32([points[index1],points[index2],points[index3],points[index4]])
        imageCoords2 = np.float32([[0,0],[960,0],[0,1280],[960,1280]])
        matrix_aff=cv.getPerspectiveTransform(imageCoords1,imageCoords2)
        imgWarp=cv.warpPerspective(contourImage,matrix_aff,(960,1280))
        imageShow(imgWarp)
        
        flagQuery=input("Введіть будь-який текст, якщо бажаєте змінити розмір ядра, або Enter, щоб припинити роботу програми: ")
        if(flagQuery==""):
            flagCoreLoop=False

# "photos/photo11.jpg"
arc=input("Введіть шлях до зображення ")
transformMain(arc)

